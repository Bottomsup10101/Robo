
// Implement a stack using link list and check whether the give string is a palindrome or not.
#include<iostream>
using namespace std;
struct Node{
char data;
Node* next;
Node(int data){
this->data=data;
next=nullptr;
}
};
class Stack{
private:
Node* top;
public:
Stack(){
top=nullptr;
}
void push(char data){
Node* newNode = new Node(data);
if(top == nullptr){
top = newNode;
}
else{
newNode->next = top;
top = newNode;
}
}
char pop(){
if(top == nullptr){
return -1;
}
int data = top->data;
Node* temp = top;
top = top->next;
delete temp;
return data;
}
bool isEmpty(){
return top == nullptr;
}
char peek(){
if(top == nullptr){
return -1;
}
return top->data;
}
};
bool isPalindrome(string s){
Stack stack;
for(int i = 0; i < s.length(); i++){
stack.push(s[i]);
}
string reversed = "";
while(!stack.isEmpty()){
reversed += stack.pop();
}
return s == reversed;
}
int main(){
string s = "radar";
if (isPalindrome(s)) {
cout << "'" << s << "' is a palindrome" << endl;
} else {
cout << "'" << s << "' is not a palindrome" << endl;
}
return 0;
}
