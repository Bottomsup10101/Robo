
#include<iostream>
using namespace std;
struct Node {
int data;
Node* next;
Node(int data) {
this->data = data;
next = nullptr;
}
};
class Queue {
Node* head = nullptr;
Node* tail = nullptr;
bool isEmpty() {
return head == nullptr;
}
public:
void enqueue(int data) {
Node* newNode = new Node(data);
if (isEmpty()) {
head = newNode;
tail = newNode;
}
else {
tail->next = newNode;
tail = newNode;
}
}
int dequeue() {
if (isEmpty()) {
return -1;
}
else if (head == tail) {
int data = head->data;
delete head;
head = nullptr;
tail = nullptr;
return data;
}
else {
int data = head->data;
Node* temp = head;
head = head->next;
delete temp;
return data;
}
}
int peek() {
if (isEmpty()) {
return -1;
}
else {
return head->data;
}
}
void printQueue() {
if (isEmpty()) {
cout << "Queue is empty" << endl;
return;
}
Node* temp = head;
while (temp != nullptr) {
cout << temp->data << " ";
temp = temp->next;
}
cout << endl;
}
~Queue() {
while (head != nullptr) {
Node* temp = head;
head = head->next;
delete temp;
}
}
bool isQueueEmpty() {
return isEmpty();
}
};
int main() {
Queue q;
q.enqueue(1);
q.enqueue(2);
q.enqueue(3);
q.enqueue(4);
q.enqueue(5);
cout << "Queue: ";
q.printQueue();
int dequeued = q.dequeue();
if (dequeued != -1) {
cout << "Dequeued element: " << dequeued << endl;
} else {
cout << "Queue is empty" << endl;
}
cout << "Queue: ";
q.printQueue();
int front = q.peek();
if (front != -1) {
cout << "Front element: " << front << endl;
} else {
cout << "Queue is empty" << endl;
}
cout << "Is queue empty? " << (q.isQueueEmpty() ? "Yes" : "No") <<
endl;
return 0;
}
