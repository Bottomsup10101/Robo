#include<iostream>
using namespace std;
struct Node {
int data;
Node* next;
Node(int data) {
this->data = data;
this->next = nullptr;
}
};
class LinkedList {
Node* head;
public:
LinkedList() {
head = nullptr;
}
// insert a new node at the end
void insert(int data) {
Node* newNode = new Node(data);
if (head == nullptr) {
head = newNode;
} else {
Node* temp = head;
while (temp->next != nullptr) {
temp = temp->next;
}
temp->next = newNode;
}
}
void removeKey(int key) {
// Remove node from the beginning if they match the key
while (head != nullptr && head->data == key) {
Node* temp = head;
head = head->next;
delete temp;
}
// Remove nodes that match the key from the rest of the list
Node* current = head;
while (current != nullptr && current->next != nullptr) {
if (current->next->data == key) {
Node* temp = current->next;
current->next = current->next->next;
delete temp;
} else {
current = current->next;
}
}
}
void display() {
if (head == nullptr) {
cout << "List is empty" << endl;
return;
}
Node* temp = head;
while (temp != nullptr) {
cout << temp->data << " ";
temp = temp->next;
}
cout << endl;
}
// Destructor
~LinkedList() {
Node* current = head;
while (current != nullptr) {
Node* nextNode = current->next;
delete current;
current = nextNode;
}
}
};
int main() {
LinkedList list;
int N, key;
cout << "Enter number of elements: ";
cin >> N;
cout << "Enter the elements: ";
for (int i = 0; i < N; i++) {
int element;
cin >> element;
list.insert(element);
}
cout << "Original list: ";
list.display();
cout << "Enter key to be removed: ";
cin >> key;
list.removeKey(key);
cout << "List after removing key " << key << ": ";
list.display();
return 0;
}
