#include <iostream>
#include <string>
using namespace std;
struct Node {
char data;
Node* next;
Node(char data) {
this->data = data;
this->next = nullptr;
}
};
class CircularLinkedList {
Node* head;
public:
CircularLinkedList() {
head = nullptr;
}
void insert(char data) {
Node* newNode = new Node(data);
if (head == nullptr) {
head = newNode;
head->next = head; // Point to itself to make it circular
} else {
Node* temp = head;
// Traverse till the last node
while (temp->next != head) {
temp = temp->next;
}
temp->next = newNode;
newNode->next = head; // Complete the circular link
}
}
// Function to display the circular linked list
void display() {
if (head == nullptr) {
cout << "List is empty" << endl;
return;
}
Node* temp = head;
do {
cout << temp->data << " ";
temp = temp->next;
} while (temp != head); // Stop when we reach the head again
cout << endl;
}
// Destructor to clean up memory
~CircularLinkedList() {
if (head == nullptr) return;
Node* current = head;
Node* nextNode;
// Break the circular link to make cleanup easier
do {
nextNode = current->next;
delete current;
current = nextNode;
} while (current != head);
}
};
int main() {
CircularLinkedList list;
string name;
cout << "Enter the name: ";
getline(cin, name);
// Insert each character of the name into the circular linked list
for (char c : name) {
list.insert(c);
}
cout << "Characters in the circular linked list: ";
list.display();
return 0;
}
